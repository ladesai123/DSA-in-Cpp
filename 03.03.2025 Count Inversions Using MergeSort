//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    int merge(vector<int>& arr, int start,int middle, int end) {
        int n1=middle-start+1;
        int n2=end-middle;
        vector<int> leftArray(n1);
        vector<int> rightArray(n2);
        for(int i=0;i<n1;i++){
            leftArray[i]=arr[start+i];
        }
        for(int i=0;i<n2;i++){
            rightArray[i]=arr[middle+i+1];
        }
        int i=0,j=0,k=start;
        int res=0;
        while(i<n1&&j<n2){
            if(leftArray[i]<=rightArray[j]){
                arr[k++]=leftArray[i++];
            }else{
                arr[k++]=rightArray[j++];
                res+=(n1-i);
            }
        }
        while(i<n1){
            arr[k++]=leftArray[i++];
        }
        while(j<n2){
            arr[k++]=rightArray[j++];
        }
        return res;
    }
    int mergeSort(vector<int>& arr,int start, int end) {
        int middle = (start+end)/2;
        if(start>=end){
            return 0;
        }
        int count = 0;
        int res=0;
        res+=mergeSort(arr, start, middle);
        res+=mergeSort(arr, middle+1, end);
        res+=merge(arr, start,middle, end);
        return res;
    }
    // Function to count inversions in the array.
    int inversionCount(vector<int> &arr) {
        // Your Code Here
        int ans = mergeSort(arr,0, arr.size()-1);
        return ans;
    }
};


//{ Driver Code Starts.

int main() {

    int T;
    cin >> T;
    cin.ignore();
    while (T--) {
        int n;
        vector<int> a;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int num;
        while (ss >> num)
            a.push_back(num);
        Solution obj;
        cout << obj.inversionCount(a) << endl;
        cout << "~" << endl;
    }

    return 0;
}

// } Driver Code Ends
